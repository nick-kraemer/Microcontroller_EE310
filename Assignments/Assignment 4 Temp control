
// Title: Heating and cooling system
//-----------------------------
// Purpose: This program takes input refrence temperature and compares it to an input measured temperature.
//	    The values of the reference temp is placed into Reg 0x60,0x61,0x62
//	    The values of the measured temp is placed into Reg 0x70,0x71,0x72
//	    If the temp is to hot a cooling system is turned on. If the temp is 
//	    too cold a heating system is turned on
//	    The binary equivilent of the measured temp are placed into (REG 70,71,72)
//	    Binary equivilent of reference temperature are placed into (REG 60,61,62)
// Dependencies:I'am using a file called Header.inc attacted to this project.
// Compiler: ASM 2.4
// Author: Nick Kraemer
// OUTPUTS: Binary equivilent of measured temperature (REG 70,71,72)
//	    Binary equivilent of reference temperature (REG 60,61,62)
//	    LED_HEAT (portD1)
//	    LED_COOL (portD2)
// INPUTS: Refrence temperature(register 20)
//	    measured temperature (register 21)
// Versions:
//  	V1.0: today’s date - First version 
//  	V1.2: date - Changes something….
//-----------------------------
; Initialization
;---------------------
#include "C:\Users\nkrae\OneDrive\Documents\310 MPlab Assignments\Assignment 4.X\Header.inc.inc"
#include <xc.inc>
    
    
// PROGRAM INPUTS
//----------------
#define  refTempInput 		35 ; this is the input value
#define  measuredTempInput 	28 ; this is the input value


//----- -----------
//REGISTERS
//----------------
#define  measuredTempREG 	0x21 ; this is Reg where measured temp is stored
#define  refTempREG 		0x20 ; this is Reg where RefTemp is stored
#define  contREG		0x22; This is REG where the contREG is stored
#define  maximumTEMP		0x00; this reg will help me determine if Measured temp is negative

//----------------
// PROGRAM OUTPUTS
//----------------
;RMND_L	EQU 0x70    
;RMND_M EQU 0x71
;RMND_H EQU 0x72
;ref_RMND_L	EQU 0x60
;ref_RMND_M EQU  0x61
;ref_RMND_H EQU 0x62
#define   HEATER  PORTD,2
#define   COOLER  PORTD,1


;-----------MAIN CODE------------------
    PSECT absdata,abs,ovrld        ; Do not change
    ORG 0x20	;start program memory at 0x20
    MOVLW 0x00
    MOVWF	TRISD	; make PORTD an output
    MOVLW   measuredTempInput
    MOVWF   measuredTempREG ; put measure temp into measured temp Reg
    MOVLW   refTempInput
    MOVWF   refTempREG  ; put reference temp into reference temp REG
   
;-------------------------------------------
;HEX TO DECIMAL CONVERSION
NUME EQU 0x40 ; location for NUME
QU EQU	0x10 ; location for the quotient
RMND_L	EQU 0x70    
RMND_M EQU  0x71
RMND_H EQU 0x72
MYDEN EQU 0x0A	;decrease by 10 each time
mynum EQU measuredTempInput	;my num = measured temperature

MOVLW mynum
MOVWF NUME  ;mynum into REG0x40
MOVLW MYDEN ;my den= 10(deicimal)
_D_1:	;digit 1
    INCF QU,F	;incrase the quotient
    SUBWF NUME	;NUME-10
    BC _D_1	;branch if there is no carry(if positive go to _D_1)
    ADDWF NUME	; decreased by 10 to many(add 10 back)
    DECF QU,f	;inceased quotient by 1 too many decrease by 1 
    MOVFF NUME, RMND_L ; save the first digit
    MOVFF QU,NUME   ; move quotient(whats left) into NUME 
    CLRF QU	; clear quotient
_D_2:	;digit 2 same steps as listed above
    INCF    QU,F 
    SUBWF   NUME
    BC	_D_2
    ADDWF NUME
    DECF QU,F	
    MOVFF NUME, RMND_M ;tens place
    MOVFF QU,RMND_H;hundreds (not neccessary for this project)
    ;-------------------------------------------
;repeat steps for reference temperature
;reference function _D_1 for clarification
ref_RMND_L	EQU 0x60
ref_RMND_M EQU  0x61
ref_RMND_H EQU 0x62

refmynum EQU refTempInput	

CLRF QU
MOVLW refmynum
MOVWF NUME
MOVLW MYDEN
_ref_D_1:
    INCF QU,F
    SUBWF NUME
    BC _ref_D_1
    ADDWF NUME
    DECF QU,f
    MOVFF NUME, ref_RMND_L ; save the first digit
    MOVFF QU,NUME
    CLRF QU 
_ref_D_2:
    INCF    QU,F
    SUBWF   NUME
    BC	_ref_D_2
    ADDWF NUME
    DECF QU,F
    MOVFF NUME, ref_RMND_M
    MOVFF QU,ref_RMND_H
    ;-----------------------------------
    
    MOVLW 61
    MOVWF maximumTEMP ;maxtemp=61
    MOVLW measuredTempInput
    CPFSLT  maximumTEMP; if 61 < measured temp skip (this means measured temp is negative)
    GOTO _EQUAL
    GOTO _LED_HEAT ; this happens when measured temp is negative,so it should heat up
	
_EQUAL:    
    MOVLW   measuredTempInput
    CPFSEQ  refTempREG ;if reference temp = measured temp skip
    GOTO _HEAT
    GOTO _LED_OFF	
	
_HEAT: 
    MOVLW   measuredTempInput
    CPFSGT  refTempREG ; if reference temp > measured temp skip (too cold)
    GOTO _COOL
    GOTO _LED_HEAT
    
_COOL:	
    MOVLW   measuredTempInput
    CPFSLT	refTempREG ; compare reference temp with measured temp if < skip (too hot)
    sleep ; if the code made it here there is an error
    GOTO _LED_COOL
	
_LED_OFF: 
    MOVLW 0x00
    MOVWF contREG	;set contreg=0
    MOVWF PORTD,a
    sleep

_LED_HEAT:
    MOVLW 0x1
    MOVWF contREG 	;set contreg=1
    MOVLW 0b00000010
    MOVWF PORTD ,a
    sleep

_LED_COOL: 
    MOVLW 0x2
    MOVWF contREG 	;set contreg=2
    MOVLW 0b000000100
    MOVWF PORTD,a
    sleep
